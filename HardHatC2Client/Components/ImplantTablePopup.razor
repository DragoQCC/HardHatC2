@using HardHatCore.HardHatC2Client.Models;
@using HardHatCore.HardHatC2Client.Pages;
@using HardHatCore.HardHatC2Client.Plugin_BaseClasses;
@using HardHatCore.HardHatC2Client.Plugin_Interfaces;
@using MudBlazor
@using System.Collections.Generic
@using HardHatCore.HardHatC2Client.Services
@using System.Collections.ObjectModel
@using System.Linq
@using System.Diagnostics
@using RestSharp.Authenticators
@using Blazored.LocalStorage
@using MudBlazor.Extensions
@using MudBlazor.Extensions.Components
@using MudExtensions.Utilities
@using MudExtensions.Enums
@using Bromix.MudBlazor.MaterialDesignIcons
@using HardHatCore.HardHatC2Client.Utilities



@if (HideOfflineImplants)
{
    ImplantDisplayList = AvalibleImplants.Where(x => x.Status == "Active").ToList();
}
else
{
    ImplantDisplayList = AvalibleImplants.ToList();
}
<MudDialog>
    <DialogContent>
        <div class="container-fluid d-flex flex-grow-1" style="height:50vh; overflow-y:scroll">
            @if (HideOfflineImplants)
            {
                ImplantDisplayList = Implants.ImplantList.Where(x => x.Status == "Active").ToList();
            }
            else
            {
                ImplantDisplayList = Implants.ImplantList.ToList();
            }
            <MudDataGrid Style="width:100%; height:50vh;" Class="flex-auto" HeaderClass="@Implants.GetHeaderClass()" Items="@ImplantDisplayList" T="ExtImplant_Base" ShowMenuIcon="true" QuickFilter="@FilterFunc1" FilterMode="DataGridFilterMode.ColumnFilterMenu" HorizontalScrollbar="true" Virtualize="true" FixedHeader="true" Hover="true" Dense="true" Elevation="10" Outlined="true" DragDropColumnReordering="@true" ApplyDropClassesOnDragStarted="@true" Hideable="true" ColumnResizeMode="ResizeMode.Container" ColumnsPanelReordering="true" ShowColumnOptions="false" DragIndicatorIcon="">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Implants</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudToggleIconButton @bind-Toggled="@HideOfflineImplants" Color="Color.Primary" Icon="@Icons.Material.Filled.Visibility" ToggledIcon="@Icons.Material.Filled.VisibilityOff" Title="Hide Offline Implants" ToggledTitle="Hide Offline Implants" />
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.Number" Title="#" />
                    <TemplateColumn Context="Rowcontext">
                        <CellTemplate>
                            <MudBadge Class="mud-badge-implant-table" Bordered="false" Overlap="false" Content=@ImplantInteract.SetPanelBadgeCount(Rowcontext.Item) Color="Color.Primary">
                                <MudIcon Size="Size.Small" Class="mb-2 ms-2" Icon=@Icons.Material.Outlined.DesktopWindows Color=@Implants.SetColor(Rowcontext.Item.Metadata.Integrity)></MudIcon>
                            </MudBadge>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Status" Title="Status" />
                    <PropertyColumn Property="x => x.ExternalAddress" Title="External Address" />
                    <PropertyColumn Property="x => x.Metadata.ManagerName" Title="Manager" />
                    <PropertyColumn Property="x => x.ConnectionType" Title="Connection Type" />
                    <PropertyColumn Property="x => x.Metadata.Address" Title="Address" />
                    <PropertyColumn Property="x => x.Metadata.Hostname" Title="Hostname" />
                    <PropertyColumn Property="x => x.Metadata.Username" Title="Username" />
                    <PropertyColumn Property="x => x.Note" Title="Note" />
                    <PropertyColumn Property="x => x.Metadata.ProcessName" Title="Process Name" />
                    <PropertyColumn Property="x => x.Metadata.ProcessId" Title="Process Id" />
                    <PropertyColumn Property="x => x.Metadata.Integrity" Title="Integrity" />
                    <PropertyColumn Property="x => x.Metadata.Arch" Title="Arch" />
                    <PropertyColumn Property="x => x.Metadata.Sleep" Title="Sleep" />
                    <PropertyColumn Property="x => x.LastSeen" Title="Last Seen" />
                    <PropertyColumn Property="x => x.FirstSeen" Title="First Seen" />
                    <PropertyColumn Property="x => x.ImplantType" Title="Implant Type" />
                </Columns>
            </MudDataGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {
    List<ExtImplant_Base> selectedImplants = new();
    List<ExtImplant_Base> AvalibleImplants = Implants.ImplantList.ToList().Where(x => !(ImplantInteract.InteractImplants.Contains(x))).ToList();
    List<ExtImplant_Base> ImplantDisplayList = new();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    public static bool HideOfflineImplants { get; set; }
    private string searchString1 = "";


    public void OnImplantAddedChanged(bool added, ExtImplant_Base implant)
    {
        if (added)
        {
            selectedImplants.Add(implant);
        }
        else
        {
            selectedImplants.Remove(implant);
        }
    }

    private bool FilterFunc1(ExtImplant_Base search) => FilterFunc(search, searchString1);

    private bool FilterFunc(ExtImplant_Base search, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //for each element in the array if it contains searchString then return true
        if (search.Metadata.Id.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.Sleep.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.Address.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.Arch.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.Hostname.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.Integrity.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.LastSeen.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.ManagerName.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.Username.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.ProcessId.ToString().ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Metadata.ProcessName.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ConnectionType.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ExternalAddress.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.Status.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        if (search.ImplantType.ToLower().Contains(searchString.ToLower()))
        {
            return true;
        }
        return false;
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(selectedImplants));
    void Cancel() => MudDialog.Cancel();
}
